package com.springbootmicroservices.userservice.model.user.mapper;

import com.springbootmicroservices.userservice.model.user.Token;
import com.springbootmicroservices.userservice.model.user.dto.response.TokenResponse;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.processing.Generated;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-06-25T15:07:26+0530",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.41.0.v20250213-1140, environment: Java 21.0.6 (Eclipse Adoptium)"
)
public class TokenToTokenResponseMapperImpl implements TokenToTokenResponseMapper {

    @Override
    public List<TokenResponse> map(Collection<Token> sources) {
        if ( sources == null ) {
            return null;
        }

        List<TokenResponse> list = new ArrayList<TokenResponse>( sources.size() );
        for ( Token token : sources ) {
            list.add( map( token ) );
        }

        return list;
    }

    @Override
    public TokenResponse map(Token source) {
        if ( source == null ) {
            return null;
        }

        TokenResponse.TokenResponseBuilder tokenResponse = TokenResponse.builder();

        tokenResponse.accessToken( source.getAccessToken() );
        tokenResponse.accessTokenExpiresAt( source.getAccessTokenExpiresAt() );
        tokenResponse.refreshToken( source.getRefreshToken() );

        return tokenResponse.build();
    }
}
