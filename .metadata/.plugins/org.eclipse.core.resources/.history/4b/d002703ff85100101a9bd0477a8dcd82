package com.example.security;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {
	    
	    private final JwtFilter jwtFilter;

	    @Bean
	    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	    	http.csrf(csrf -> csrf.disable())
	    	    .authorizeHttpRequests(auth -> auth
	    	    		
	    	    .requestMatchers("/api/v1/auth/register/user", "/api/v1/auth/register/agent","/api/v1/auth/test","/api/v1/auth/login/agent","/api/v1/auth/login/user","/api/v1/auth/micro/**","/actuator/**","/swagger-ui/**","/v3/apidocs/**").permitAll()
	            .requestMatchers("/api/v1/auth/admin/**").hasRole("Admin")
	            .requestMatchers("/api/v1/hotel/user/**").hasRole("User")
	            .requestMatchers("/api/v1/auth/travel_agent/**").hasRole("TravelAgent")
	            .requestMatchers("/api/v1/auth/hotel_agent/**").hasRole("HotelAgent")
	            .requestMatchers("/api/v1/auth/flight_agent/**").hasRole("FlightAgent")
	            
	            .anyRequest().authenticated())
	            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

	        return http.build();
	    }
	    
	    @Bean
	    public PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }

}
