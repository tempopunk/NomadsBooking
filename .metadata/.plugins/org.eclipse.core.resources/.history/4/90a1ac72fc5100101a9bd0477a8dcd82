package com.example.security;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

/**
 * Converts a ServerWebExchange (HTTP request) into an unauthenticated Authentication object.
 * This is used by Spring Security's AuthenticationWebFilter to obtain the credentials (JWT token)
 * from the request before authentication.
 */
@Component
public class JwtServerAuthenticationConverter implements ServerAuthenticationConverter {

    @Override
    public Mono<Authentication> convert(ServerWebExchange exchange) {
        return Mono.justOrEmpty(exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION))
                .filter(header -> header.startsWith("Bearer "))
                .map(header -> header.substring(7)) // Extract the token
                .map(token -> new UsernamePasswordAuthenticationToken(token, token)); // Principal and credentials are the token
    }
}
