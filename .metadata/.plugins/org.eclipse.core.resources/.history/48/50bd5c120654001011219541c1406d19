//package com.nomads.controller;
//
//
//
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RestController;
//
//import com.nomads.dto.AgentDto;
//import com.nomads.dto.LoginRequest;
//import com.nomads.dto.LoginResponse;
//import com.nomads.dto.UserDto;
//import com.nomads.service.AuthService;
//
//import jakarta.validation.Valid;
//import lombok.RequiredArgsConstructor;
//
//@RestController
//@RequestMapping("/api/v1")
//@RequiredArgsConstructor
//public class AuthController {
//	
//    private final AuthService authService;
//	
//	
//
//    // ðŸ”¹ Handles registration for Users & Admins
//    @PostMapping("/register/user")
//    public ResponseEntity<String> registerUser(@Valid @RequestBody UserDto userDto) {
//        return ResponseEntity.ok(authService.registerUser(userDto));
//    }
// 
//    // ðŸ”¹ Handles registration for Travel, Hotel & Flight Agents
//    @PostMapping("/register/agent")
//    public ResponseEntity<String> registerAgent(@Valid @RequestBody AgentDto agentDto) throws Exception {
//        return ResponseEntity.ok(authService.registerAgent(agentDto));
//    }
//    
//    @GetMapping("/test")
//    public String test() {
//    	return "hello";
//    }
//    
//    @PostMapping("/login/agent")
//    public ResponseEntity<LoginResponse> loginAgent(@Valid @RequestBody LoginRequest loginRequest) {
//    	
//    	
//    	return ResponseEntity.ok(authService.loginAgent(loginRequest.getEmail(), loginRequest.getPassword()));
//    	
//    }
//    
//    @PostMapping("/login/user")
//    public ResponseEntity<LoginResponse> loginUser(@Valid @RequestBody LoginRequest loginRequest) {
//    	
//    	
//    	return ResponseEntity.ok(authService.loginUser(loginRequest.getEmail(), loginRequest.getPassword()));
//    }
//    
//    @GetMapping("/hotel_agent/test")
//    public String test1(){
//    	return "hello this should be accesed by hotel manager only";
//    }
//    
//    @GetMapping("/user/test")
//    public String test2(){
//    	return "hello this should be accesed by user";
//    }
//    
//
//}
package com.nomads.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.nomads.dto.AgentDto;
import com.nomads.dto.LoginRequest;
import com.nomads.dto.LoginResponse;
import com.nomads.dto.UserDto;
import com.nomads.service.AuthService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/auth")
@RequiredArgsConstructor

public class AuthController {

    private final AuthService authService;

    @Operation(summary = "Register a new user or admin")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "User registered successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input")
    })
    @PostMapping("/register/user")
    public ResponseEntity<String> registerUser(@Valid @RequestBody UserDto userDto) {
        return ResponseEntity.ok(authService.registerUser(userDto));
    }

    @Operation(summary = "Register a new agent (Travel, Hotel, Flight)")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Agent registered successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input or exception occurred")
    })
    @PostMapping("/register/agent")
    public ResponseEntity<String> registerAgent(@Valid @RequestBody AgentDto agentDto) throws Exception {
        return ResponseEntity.ok(authService.registerAgent(agentDto));
    }

    @Operation(summary = "Test endpoint")
    @GetMapping("/test")
    public String test() {
        return "hello";
    }

    @Operation(summary = "Login for agents")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Login successful"),
        @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    @PostMapping("/login/agent")
    public ResponseEntity<LoginResponse> loginAgent(@Valid @RequestBody LoginRequest loginRequest) {
        return ResponseEntity.ok(authService.loginAgent(loginRequest.getEmail(), loginRequest.getPassword()));
    }

    @Operation(summary = "Login for users")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Login successful"),
        @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    @PostMapping("/login/user")
    public ResponseEntity<LoginResponse> loginUser(@Valid @RequestBody LoginRequest loginRequest) {
        return ResponseEntity.ok(authService.loginUser(loginRequest.getEmail(), loginRequest.getPassword()));
    }

    @Operation(summary = "Hotel agent test endpoint")
    @GetMapping("/hotel_agent/test")
    public String test1() {
        return "hello this should be accessed by hotel manager only";
    }

    @Operation(summary = "User test endpoint")
    @GetMapping("/user/test")
    public String test2() {
        return "hello this should be accessed by user";
    }
    @GetMapping("micro/gethagentid/{hotelId}")
    public int gethotelagent(@PathVariable int hotelId) {
    	
    	return authService.gethotelagent(hotelId);
    }
    @GetMapping("micro/getfagentid/{flightId}")
    public int getflightagent(@PathVariable int flightId) {
    	return authService.getflightagent(flightId);
    }
    @GetMapping("micro/getpagentid/{packageId}")
    public int getpackageagent(@PathVariable int packageId) {
    	return authService.gettravelagent(packageId);
    }
    
    @PostMapping("micro/linkid/{agentType}/{agentId}/{id}")
    public ResponseEntity<String> linkId(@PathVariable String agentType,@PathVariable int agentId, @PathVariable int id){
    	return ResponseEntity.ok(authService.linkId(agentType,agentId,id));
    }
}

